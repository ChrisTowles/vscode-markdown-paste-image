{
  "publisher": "chris-towles",
  "name": "markdown-paste-image",
  "displayName": "Markdown Paste Image",
  "version": "0.0.6",
  "packageManager": "pnpm@7.32.2",
  "description": "Paste Image in markdown from clipboard",
  "author": "Chris Towles",
  "license": "MIT",
  "homepage": "https://github.com/ChrisTowles/vscode-markdown-paste-image#readme",
  "repository": {
    "type": "git",
    "url": "https://github.com/ChrisTowles/vscode-markdown-paste-image"
  },
  "bugs": {
    "url": "https://github.com/ChrisTowles/vscode-markdown-paste-image/issues"
  },
  "keywords": [
    "paste",
    "image",
    "markdown",
    "paste image",
    "keybindings",
    "markdown paste image"
  ],
  "categories": [
    "Other"
  ],
  "sideEffects": false,
  "main": "./dist/index.js",
  "icon": "res/icon.png",
  "files": [
    "dist"
  ],
  "engines": {
    "vscode": "^1.77.0"
  },
  "activationEvents": [
    "onCommand:extension.markdownPasteImage"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Markdown Paste Image Configuration",
      "properties": {
        "markdownPasteImage.imageFolderPath": {
          "type": "string",
          "default": "${currentFileDir}",
          "description": "The destination to save image file. \n\nYou can use variable `${currentFileDir}` and `${projectRoot}`. `${currentFileDir}` will be replaced by the path of directory that contain current editing file. `${projectRoot}` will be replaced by path of the project opened in vscode."
        },
        "markdownPasteImage.defaultImageName": {
          "type": "string",
          "default": "yyyyLLmm-HHmmss",
          "description": "The default image file name. The value of this config will be pass to the 'format' function of Luxon library, you can read document https://moment.github.io/luxon/#/formatting?id=table-of-tokens for usage. \nIf you have text selected, it will be used as the file name instead."
        },
        "markdownPasteImage.imageNamePrefix": {
          "type": "string",
          "default": "",
          "description": "The string prepended to the image file name."
        },
        "markdownPasteImage.imageNameSuffix": {
          "type": "string",
          "default": "",
          "description": "The string appended to the image file name."
        },
        "markdownPasteImage.imageUriPathPrefix": {
          "type": "string",
          "default": "",
          "description": "The string prepended to the resolved image path. Can be used if you want to supply a custom domain to image url."
        },
        "markdownPasteImage.imageUriPathSuffix": {
          "type": "string",
          "default": "",
          "description": "The string appended to the resolved image path. Can be used if you want to supply a custom parameters to image url."
        },
        "markdownPasteImage.encodePath": {
          "type": "string",
          "enum": [
            "none",
            "urlEncode",
            "urlEncodeSpace"
          ],
          "default": "urlEncodeSpace",
          "description": "The string appended to the image file name. How to encode image path before insert to editor."
        },
        "markdownPasteImage.insertPattern": {
          "type": "string",
          "default": "${imageSyntaxPrefix}${imageFilePath}${imageSyntaxSuffix}",
          "description": "The pattern of string that would be pasted to text."
        },
        "markdownPasteImage.showFilePathConfirmInputBox": {
          "type": "boolean",
          "default": true,
          "description": "Set to true if you want to be able to change the file path or name prior to saving the file to disk"
        },
        "markdownPasteImage.filePathConfirmInputBoxMode": {
          "type": "string",
          "enum": [
            "fullPath",
            "onlyName"
          ],
          "default": "fullPath",
          "description": "Set the mode of file path confirm input box"
        }
      }
    },
    "commands": [
      {
        "command": "extension.markdownPasteImage",
        "title": "Markdown Paste Image"
      }
    ],
    "keybindings": [
      {
        "command": "extension.markdownPasteImage",
        "key": "ctrl+alt+v",
        "mac": "cmd+alt+v",
        "when": "editorTextFocus"
      }
    ]
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production tsup",
    "dev": "cross-env NODE_ENV=development tsup --watch",
    "lint": "eslint .",
    "vscode:prepublish": "nr build",
    "publish": "vsce publish --no-dependencies",
    "pack": "vsce package --no-dependencies",
    "test": "vitest --reporter verbose",
    "typecheck": "tsc --noEmit",
    "readme": "esno ./scripts/update-readme.ts",
    "release": "bumpp --commit --push --tag && nr publish"
  },
  "devDependencies": {
    "@antfu/eslint-config": "^0.38.5",
    "@antfu/ni": "^0.21.3",
    "@antfu/utils": "^0.7.2",
    "@babel/core": "^7.21.4",
    "@babel/parser": "^7.21.4",
    "@babel/traverse": "^7.21.4",
    "@babel/types": "^7.21.4",
    "@types/fs-extra": "^11.0.1",
    "@types/luxon": "^3.3.0",
    "@types/node": "^18.16.2",
    "@types/vscode": "^1.77.0",
    "@vitest/ui": "^0.30.1",
    "@vscode/test-electron": "^2.3.0",
    "bumpp": "^9.1.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.39.0",
    "esno": "^0.16.3",
    "fast-glob": "^3.2.12",
    "fs-extra": "^11.1.1",
    "luxon": "^3.3.0",
    "pnpm": "^7.32.2",
    "rimraf": "^5.0.0",
    "tsup": "^6.7.0",
    "typescript": "^5.0.4",
    "upath": "^2.0.1",
    "vite": "^4.3.3",
    "vitest": "^0.30.1",
    "vsce": "^2.15.0"
  }
}
